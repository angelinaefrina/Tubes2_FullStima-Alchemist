// // page.js
// "use client";

// import { useState } from "react";
// import Head from "next/head";
// import Link from "next/link";
// import Image from "next/image";
// import { useEffect } from "react";
// import { motion, AnimatePresence } from 'framer-motion';
// import { io } from "socket.io-client";


// export default function Home() {
//   const [mode, setMode] = useState('');
//   const [recipeName, setRecipeName] = useState('');
//   const [isMultiple, setIsMultiple] = useState(false);
//   const [maxRecipes, setMaxRecipes] = useState('');
//   const [errorMessage, setErrorMessage] = useState('');
//   const [result, setResult] = useState([]);
  
//   const searchResult = null; // atau isi dengan tree JSX kalau sudah ada hasil
//   const searchTime = "";
//   const nodesVisited = 0;

//   const socket = io("http://localhost:8080"); // ganti dengan alamat backend kamu

//   function AlchemySearch() {
//     const [result, setResult] = useState(null);

//     useEffect(() => {
//       socket.on("connect", () => {
//         console.log("Connected:", socket.id);
//       });

//       socket.on("result", (data) => {
//         console.log("Received result:", data);
//         setResult(data); // simpan hasil untuk ditampilkan/visualisasi
//       });

//       socket.on("error", (err) => {
//         console.error("Error:", err);
//       });

//       return () => {
//         socket.off("result");
//         socket.off("error");
//       };
//     }, []);

//     const handleSearch = () => {
//       socket.emit("search", {
//         method: "dfs",
//         target: "life",
//         multiple: false,
//       });
//     };

//     return (
//       <div>
//         <button onClick={handleSearch}>Cari "life"</button>
//         <pre>{JSON.stringify(result, null, 2)}</pre>
//       </div>
//     );
//   }

//   const handleSearch = () => {
//     // Validasi input
//     if (!mode || !recipeName.trim() || (isMultiple && (!maxRecipes || isNaN(maxRecipes)))) {
//       setErrorMessage('Please complete all required fields before searching.');
//       return;
//     }
  
//     setErrorMessage('');
  
//     if (mode === 'bfs') {
//       setResult([`Shortest recipe to create "${recipeName}"`]);
//     } else if (mode === 'dfs') {
//       const total = isMultiple ? Math.min(Number(maxRecipes), 720) : 1;
//       const recipes = [];
//       for (let i = 1; i <= total; i++) {
//         recipes.push(`Recipe #${i} to create "${recipeName}"`);
//       }
//       setResult(recipes);
//     }
//   };

//   return (
//     <>
//       <Head>
//         <title>FullStima Alchemist</title>
//       </Head>
//       <div className="flex flex-col h-screen overflow-hidden">
//         <div className="ml-4 mr-4 mt-2 justify-center h-[7%]">
//           <div className="flex flex-row items-center justify-between">
//             <div className="flex flex-row items-center space-x-4">
//               <p className="text-[#FFFFFF] text-2xl"><b>FullStima Alchemist</b></p>
//               <p className="text-[#FFFFFF] text-m">- Little Alchemy Element Finder</p>
//             </div>
//             <Link href='/aboutpage'>
//               <button className='bg-[#D5D5D5] text-black py-2 px-4 rounded h-9'>About Us</button>
//             </Link>
//           </div>
//         </div>

//         <div className="pl-2 pr-2 flex flex-row flex-grow overflow-hidden">
//           <div className="flex flex-col flex-grow mr-2 rounded-lg w-1/4 overflow-hidden pb-2">
//             <div className="bg-[#D5D5D5] p-4 w-[100%] h-[35%] flex-grow overflow-hidden space-y-2">
//               <div className="flex flex-col items-center justify-center space-x-2">

//                 {/* First Question */}
//                 <p className="text-black text-center font-bold mr-2">Which method do you want to use?</p>
//                   {/* Toggle Mode */}
//                   <div className="flex justify-center space-x-4 pt-4">
//                     <button
//                       className={`px-4 py-2 rounded-lg font-semibold ${
//                         mode === 'bfs' ? 'bg-[#F9A71F] text-white' : 'bg-gray-200'
//                       }`}
//                       onClick={() => setMode('bfs')}
//                     >
//                       BFS
//                     </button>
//                     <button
//                       className={`px-4 py-2 rounded-lg font-semibold ${
//                         mode === 'dfs' ? 'bg-[#F9A71F]  text-white' : 'bg-gray-200'
//                       }`}
//                       onClick={() => setMode('dfs')}
//                     >
//                      DFS
//                     </button>
//                   </div>
//               </div>

//               {/* Second Question */}
//               <div className="flex flex-col items-center justify-center space-x-2">
//                 <p className="text-black text-center font-bold mr-2 pt-4 pb-4">What recipe do you want?</p>
//                 <input
//                   type="text"
//                   placeholder="Enter the recipe name here"
//                   className="w-full p-2 mb-4 bg-white rounded placeholder:text-gray text-center"
//                   value={recipeName}
//                   onChange={(e) => setRecipeName(e.target.value)}
//                 />

//              {/* Third Question */}
//               <div className="flex flex-col items-center justify-center space-x-2">
//                 <p className="text-black text-center font-bold mr-2">Find one or many recipes?</p>

//                 <div className="space-y-6 text-center pt-4 flex flex-col items-center">
//                     {/* Toggle Title */}
//                     <h1 className="text-l font-bold">
//                       {isMultiple ? 'Multiple Recipes' : 'One Recipe'}
//                     </h1>

//                     {/* Toggle Switch */}
//                     <div
//                       onClick={() => setIsMultiple(!isMultiple)}
//                       className={`w-20 h-10 rounded-full flex items-center px-1 cursor-pointer transition-colors duration-300 ${
//                         isMultiple ? 'bg-purple-800' : 'bg-purple-700'
//                       }`}
//                     >
//                       <motion.div
//                         layout
//                         transition={{ type: 'spring', stiffness: 500, damping: 30 }}
//                         className={`w-8 h-8 rounded-full bg-white shadow-md ${
//                           isMultiple ? 'ml-0' : 'ml-auto'
//                         }`}
//                       />
//                     </div>

//                     {/* Text content animation */}
//                     <AnimatePresence mode="wait">
//                       {isMultiple ? (
//                         <motion.p
//                           key="multiple"
//                           initial={{ opacity: 0, y: 10 }}
//                           animate={{ opacity: 1, y: 0 }}
//                           exit={{ opacity: 0, y: -10 }}
//                           transition={{ duration: 0.3 }}
//                           className="text-gray-700"
//                         >
//                           You will get multiple different recipes for the target element.
//                         </motion.p>
//                       ) : (
//                         <motion.p
//                           key="one"
//                           initial={{ opacity: 0, y: 10 }}
//                           animate={{ opacity: 1, y: 0 }}
//                           exit={{ opacity: 0, y: -10 }}
//                           transition={{ duration: 0.3 }}
//                           className="text-gray-700"
//                         >
//                           You will get only one recipe â€” any valid one is okay.
//                         </motion.p>
//                       )}
//                     </AnimatePresence>

//                     {/* Max recipes input (only if multiple) */}
//                     {isMultiple && (
//                       <div className="text-center">
//                         <label className="block mb-2 font-medium">
//                           How many recipes do you want to find at most?
//                         </label>
//                         <input
//                           type="number"
//                           min={1}
//                           max={720}
//                           value={maxRecipes === '' ? '' : String(maxRecipes)}
//                           onChange={(e) => {
//                             const value = parseInt(e.target.value);
//                             if (!isNaN(value)) {
//                               setMaxRecipes(Math.min(Math.max(value, 1), 720)); // Clamp antara 1 dan 720
//                             } else {
//                               setMaxRecipes('');
//                             }
//                           }}
//                           className="border rounded px-3 py-1 w-48 text-center"
//                         />
//                       </div>
//                     )}
//                   </div>
//               </div>

//               {/* Button Search */}
//               <div className="flex flex-col items-center justify-center mt-6">
//                 {errorMessage && (
//                   <p className="text-red-600 mb-2 font-medium text-center">
//                     {errorMessage}
//                   </p>
//                 )}
//                 <button
//                   className="bg-[#451952] hover:bg-[#5e2470] text-white py-2 px-6 rounded transition-colors duration-200"
//                   onClick={handleSearch}
//                   disabled={false}
//                 >
//                   Search
//                 </button>
//               </div>
//             </div>
//           </div>
//         </div>

//         <div className="flex flex-col flex-grow mr-2 rounded-lg w-3/4 overflow-hidden pb-2">
//           <div className="bg-[#D5D5D5] p-4 w-full h-full flex-grow overflow-hidden space-y-2">
//             {/* Tree Display Area */}
//             <div className="border rounded-lg bg-white flex flex-col justify-between h-[639px] p-4">
//               <div className="flex-grow overflow-auto">
//                 {searchResult ? (
//                   searchResult
//                 ) : (
//                   <div className="h-full flex items-center justify-center text-gray-400 italic">
//                     Please do a search first!
//                   </div>
//                 )}
//               </div>

//               {/* Bottom Info */}
//               <div className="flex justify-between pt-4 text-sm text-black font-medium">
//                 <div className="ml-2">Search Time: <span className="font-normal">{searchTime || "-"}</span></div>
//                 <div className="mr-2">Number of Nodes Visited: <span className="font-normal">{nodesVisited || "-"}</span></div>
//               </div>
//             </div>
//           </div>
//         </div>
//       </div>
//     </div>
//    </>
//   );
// }